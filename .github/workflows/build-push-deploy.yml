on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: prod
      appname:
        required: true
        type: string
      appdir:
        required: true
        type: string
      region:
        required: true
        type: string
    secrets:
      accesskey:
        required: true
      accesssecret:
        required: true

jobs:
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    env: 
      APP_NAME: ${{ inputs.appname }}
      APP_DIR: ${{ inputs.appdir }}
      APP_ENV: ${{ inputs.environment }}
      AWS_REGION: ${{ inputs.region }}

    steps:
    - name: checkout 
      uses: actions/checkout@v3

    - name: Set up Docker 
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Build docker image
      uses: docker/build-push-action@v2
      with: 
        context: ${{ env.APP_DIR }}
        push: false
        tags: ${{ github.sha }}
        outputs: type=docker,dest=/tmp/${{ env.APP_NAME}}.tar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.accesskey }}
        aws-secret-access-key: ${{ secrets.accesssecret }} 
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1  

    - name: load, tag and push image to ECR
      id: build-image
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.APP_NAME }}
        APP_NAME: ${{ env.APP_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker load --input /tmp/$APP_NAME.tar
        docker tag $IMAGE_TAG $ECR_REGISTRY/$REPOSITORY-$APP_ENV:$IMAGE_TAG
        docker push $ECR_REGISTRY/$REPOSITORY-$APP_ENV:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$REPOSITORY-$APP_ENV:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create new task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
      with:
        task-definition: ./.aws/${{ env.APP_NAME }}_${{ env.APP_ENV }}.json
        container-name: ${{ env.APP_NAME }}-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.APP_NAME }}-svc
        cluster: ${{ env.APP_ENV }}-cluster
        wait-for-service-stability: true